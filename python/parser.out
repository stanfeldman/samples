Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> file_input
Rule 1     file_input -> file_input endline
Rule 2     file_input -> file_input statement
Rule 3     file_input -> endline
Rule 4     file_input -> statement
Rule 5     statement -> name eq expression
Rule 6     statement -> print lparen expression rparen
Rule 7     expression -> expression plus term
Rule 8     expression -> expression minus term
Rule 9     expression -> term
Rule 10    term -> term times factor
Rule 11    term -> term div factor
Rule 12    term -> factor
Rule 13    factor -> name
Rule 14    factor -> number
Rule 15    factor -> lparen expression rparen

Terminals, with rules where they appear

div                  : 11
endline              : 1 3
eq                   : 5
error                : 
lparen               : 6 15
minus                : 8
name                 : 5 13
number               : 14
plus                 : 7
print                : 6
rparen               : 6 15
times                : 10

Nonterminals, with rules where they appear

expression           : 5 6 7 8 15
factor               : 10 11 12
file_input           : 1 2 0
statement            : 2 4
term                 : 7 8 9 10 11

Parsing method: LALR

state 0

    (0) S' -> . file_input
    (1) file_input -> . file_input endline
    (2) file_input -> . file_input statement
    (3) file_input -> . endline
    (4) file_input -> . statement
    (5) statement -> . name eq expression
    (6) statement -> . print lparen expression rparen

    endline         shift and go to state 5
    name            shift and go to state 1
    print           shift and go to state 4

    file_input                     shift and go to state 2
    statement                      shift and go to state 3

state 1

    (5) statement -> name . eq expression

    eq              shift and go to state 6


state 2

    (0) S' -> file_input .
    (1) file_input -> file_input . endline
    (2) file_input -> file_input . statement
    (5) statement -> . name eq expression
    (6) statement -> . print lparen expression rparen

    endline         shift and go to state 8
    name            shift and go to state 1
    print           shift and go to state 4

    statement                      shift and go to state 7

state 3

    (4) file_input -> statement .

    endline         reduce using rule 4 (file_input -> statement .)
    name            reduce using rule 4 (file_input -> statement .)
    print           reduce using rule 4 (file_input -> statement .)
    $end            reduce using rule 4 (file_input -> statement .)


state 4

    (6) statement -> print . lparen expression rparen

    lparen          shift and go to state 9


state 5

    (3) file_input -> endline .

    endline         reduce using rule 3 (file_input -> endline .)
    name            reduce using rule 3 (file_input -> endline .)
    print           reduce using rule 3 (file_input -> endline .)
    $end            reduce using rule 3 (file_input -> endline .)


state 6

    (5) statement -> name eq . expression
    (7) expression -> . expression plus term
    (8) expression -> . expression minus term
    (9) expression -> . term
    (10) term -> . term times factor
    (11) term -> . term div factor
    (12) term -> . factor
    (13) factor -> . name
    (14) factor -> . number
    (15) factor -> . lparen expression rparen

    name            shift and go to state 11
    number          shift and go to state 12
    lparen          shift and go to state 13

    term                           shift and go to state 10
    expression                     shift and go to state 15
    factor                         shift and go to state 14

state 7

    (2) file_input -> file_input statement .

    endline         reduce using rule 2 (file_input -> file_input statement .)
    name            reduce using rule 2 (file_input -> file_input statement .)
    print           reduce using rule 2 (file_input -> file_input statement .)
    $end            reduce using rule 2 (file_input -> file_input statement .)


state 8

    (1) file_input -> file_input endline .

    endline         reduce using rule 1 (file_input -> file_input endline .)
    name            reduce using rule 1 (file_input -> file_input endline .)
    print           reduce using rule 1 (file_input -> file_input endline .)
    $end            reduce using rule 1 (file_input -> file_input endline .)


state 9

    (6) statement -> print lparen . expression rparen
    (7) expression -> . expression plus term
    (8) expression -> . expression minus term
    (9) expression -> . term
    (10) term -> . term times factor
    (11) term -> . term div factor
    (12) term -> . factor
    (13) factor -> . name
    (14) factor -> . number
    (15) factor -> . lparen expression rparen

    name            shift and go to state 11
    number          shift and go to state 12
    lparen          shift and go to state 13

    term                           shift and go to state 10
    expression                     shift and go to state 16
    factor                         shift and go to state 14

state 10

    (9) expression -> term .
    (10) term -> term . times factor
    (11) term -> term . div factor

    plus            reduce using rule 9 (expression -> term .)
    minus           reduce using rule 9 (expression -> term .)
    endline         reduce using rule 9 (expression -> term .)
    name            reduce using rule 9 (expression -> term .)
    print           reduce using rule 9 (expression -> term .)
    $end            reduce using rule 9 (expression -> term .)
    rparen          reduce using rule 9 (expression -> term .)
    times           shift and go to state 18
    div             shift and go to state 17


state 11

    (13) factor -> name .

    times           reduce using rule 13 (factor -> name .)
    div             reduce using rule 13 (factor -> name .)
    plus            reduce using rule 13 (factor -> name .)
    minus           reduce using rule 13 (factor -> name .)
    endline         reduce using rule 13 (factor -> name .)
    name            reduce using rule 13 (factor -> name .)
    print           reduce using rule 13 (factor -> name .)
    $end            reduce using rule 13 (factor -> name .)
    rparen          reduce using rule 13 (factor -> name .)


state 12

    (14) factor -> number .

    times           reduce using rule 14 (factor -> number .)
    div             reduce using rule 14 (factor -> number .)
    plus            reduce using rule 14 (factor -> number .)
    minus           reduce using rule 14 (factor -> number .)
    endline         reduce using rule 14 (factor -> number .)
    name            reduce using rule 14 (factor -> number .)
    print           reduce using rule 14 (factor -> number .)
    $end            reduce using rule 14 (factor -> number .)
    rparen          reduce using rule 14 (factor -> number .)


state 13

    (15) factor -> lparen . expression rparen
    (7) expression -> . expression plus term
    (8) expression -> . expression minus term
    (9) expression -> . term
    (10) term -> . term times factor
    (11) term -> . term div factor
    (12) term -> . factor
    (13) factor -> . name
    (14) factor -> . number
    (15) factor -> . lparen expression rparen

    name            shift and go to state 11
    number          shift and go to state 12
    lparen          shift and go to state 13

    term                           shift and go to state 10
    expression                     shift and go to state 19
    factor                         shift and go to state 14

state 14

    (12) term -> factor .

    times           reduce using rule 12 (term -> factor .)
    div             reduce using rule 12 (term -> factor .)
    rparen          reduce using rule 12 (term -> factor .)
    plus            reduce using rule 12 (term -> factor .)
    minus           reduce using rule 12 (term -> factor .)
    endline         reduce using rule 12 (term -> factor .)
    name            reduce using rule 12 (term -> factor .)
    print           reduce using rule 12 (term -> factor .)
    $end            reduce using rule 12 (term -> factor .)


state 15

    (5) statement -> name eq expression .
    (7) expression -> expression . plus term
    (8) expression -> expression . minus term

    endline         reduce using rule 5 (statement -> name eq expression .)
    name            reduce using rule 5 (statement -> name eq expression .)
    print           reduce using rule 5 (statement -> name eq expression .)
    $end            reduce using rule 5 (statement -> name eq expression .)
    plus            shift and go to state 20
    minus           shift and go to state 21


state 16

    (6) statement -> print lparen expression . rparen
    (7) expression -> expression . plus term
    (8) expression -> expression . minus term

    rparen          shift and go to state 22
    plus            shift and go to state 20
    minus           shift and go to state 21


state 17

    (11) term -> term div . factor
    (13) factor -> . name
    (14) factor -> . number
    (15) factor -> . lparen expression rparen

    name            shift and go to state 11
    number          shift and go to state 12
    lparen          shift and go to state 13

    factor                         shift and go to state 23

state 18

    (10) term -> term times . factor
    (13) factor -> . name
    (14) factor -> . number
    (15) factor -> . lparen expression rparen

    name            shift and go to state 11
    number          shift and go to state 12
    lparen          shift and go to state 13

    factor                         shift and go to state 24

state 19

    (15) factor -> lparen expression . rparen
    (7) expression -> expression . plus term
    (8) expression -> expression . minus term

    rparen          shift and go to state 25
    plus            shift and go to state 20
    minus           shift and go to state 21


state 20

    (7) expression -> expression plus . term
    (10) term -> . term times factor
    (11) term -> . term div factor
    (12) term -> . factor
    (13) factor -> . name
    (14) factor -> . number
    (15) factor -> . lparen expression rparen

    name            shift and go to state 11
    number          shift and go to state 12
    lparen          shift and go to state 13

    term                           shift and go to state 26
    factor                         shift and go to state 14

state 21

    (8) expression -> expression minus . term
    (10) term -> . term times factor
    (11) term -> . term div factor
    (12) term -> . factor
    (13) factor -> . name
    (14) factor -> . number
    (15) factor -> . lparen expression rparen

    name            shift and go to state 11
    number          shift and go to state 12
    lparen          shift and go to state 13

    term                           shift and go to state 27
    factor                         shift and go to state 14

state 22

    (6) statement -> print lparen expression rparen .

    endline         reduce using rule 6 (statement -> print lparen expression rparen .)
    name            reduce using rule 6 (statement -> print lparen expression rparen .)
    print           reduce using rule 6 (statement -> print lparen expression rparen .)
    $end            reduce using rule 6 (statement -> print lparen expression rparen .)


state 23

    (11) term -> term div factor .

    times           reduce using rule 11 (term -> term div factor .)
    div             reduce using rule 11 (term -> term div factor .)
    rparen          reduce using rule 11 (term -> term div factor .)
    plus            reduce using rule 11 (term -> term div factor .)
    minus           reduce using rule 11 (term -> term div factor .)
    endline         reduce using rule 11 (term -> term div factor .)
    name            reduce using rule 11 (term -> term div factor .)
    print           reduce using rule 11 (term -> term div factor .)
    $end            reduce using rule 11 (term -> term div factor .)


state 24

    (10) term -> term times factor .

    times           reduce using rule 10 (term -> term times factor .)
    div             reduce using rule 10 (term -> term times factor .)
    rparen          reduce using rule 10 (term -> term times factor .)
    plus            reduce using rule 10 (term -> term times factor .)
    minus           reduce using rule 10 (term -> term times factor .)
    endline         reduce using rule 10 (term -> term times factor .)
    name            reduce using rule 10 (term -> term times factor .)
    print           reduce using rule 10 (term -> term times factor .)
    $end            reduce using rule 10 (term -> term times factor .)


state 25

    (15) factor -> lparen expression rparen .

    times           reduce using rule 15 (factor -> lparen expression rparen .)
    div             reduce using rule 15 (factor -> lparen expression rparen .)
    plus            reduce using rule 15 (factor -> lparen expression rparen .)
    minus           reduce using rule 15 (factor -> lparen expression rparen .)
    endline         reduce using rule 15 (factor -> lparen expression rparen .)
    name            reduce using rule 15 (factor -> lparen expression rparen .)
    print           reduce using rule 15 (factor -> lparen expression rparen .)
    $end            reduce using rule 15 (factor -> lparen expression rparen .)
    rparen          reduce using rule 15 (factor -> lparen expression rparen .)


state 26

    (7) expression -> expression plus term .
    (10) term -> term . times factor
    (11) term -> term . div factor

    plus            reduce using rule 7 (expression -> expression plus term .)
    minus           reduce using rule 7 (expression -> expression plus term .)
    endline         reduce using rule 7 (expression -> expression plus term .)
    name            reduce using rule 7 (expression -> expression plus term .)
    print           reduce using rule 7 (expression -> expression plus term .)
    $end            reduce using rule 7 (expression -> expression plus term .)
    rparen          reduce using rule 7 (expression -> expression plus term .)
    times           shift and go to state 18
    div             shift and go to state 17


state 27

    (8) expression -> expression minus term .
    (10) term -> term . times factor
    (11) term -> term . div factor

    plus            reduce using rule 8 (expression -> expression minus term .)
    minus           reduce using rule 8 (expression -> expression minus term .)
    endline         reduce using rule 8 (expression -> expression minus term .)
    name            reduce using rule 8 (expression -> expression minus term .)
    print           reduce using rule 8 (expression -> expression minus term .)
    $end            reduce using rule 8 (expression -> expression minus term .)
    rparen          reduce using rule 8 (expression -> expression minus term .)
    times           shift and go to state 18
    div             shift and go to state 17

